{"version":3,"sources":["icons.js","clock.js","App.js","serviceWorker.js","index.js"],"names":["Settings","react_default","a","createElement","iconContext","Provider","value","size","fi","Pause","Reset","Play","ClockWrapper","styled","div","_templateObject","WhiteField","_templateObject2","props","fieldColor","BlackField","_templateObject3","ControlContainer","_templateObject4","TimeContainer","_templateObject5","SettingsButton","_templateObject6","visible","StartStopButton","_templateObject7","ResetButton","_templateObject8","SettingsWindow","_templateObject9","settingsVisibility","SettingsBtn","button","_templateObject10","SettingsNumberInput","input","_templateObject11","SettingsFieldSet","fieldset","_templateObject12","SettingsLegend","legend","_templateObject13","Clock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","whiteHour","whiteMin","whiteSec","blackHour","blackMin","blackSec","nextPlayer","playing","addWhite","addBlack","winner","defaultSettings","countdownTimeStart","h","m","s","distance","timer","setInterval","hours","Math","floor","minutes","seconds","setState","handleWhiteClick","clearInterval","handleBlackClick","formatOutput","handleResetGame","handlePlayPauseGame","handleSettingsButton","handleSettingsCancelButton","handleSettingsSaveButton","e","parseInt","whiteHourInput","current","whiteMinInput","whiteSecInput","blackHourInput","blackMinInput","blackSecInput","addWhiteInput","addBlackInput","React","createRef","type","min","max","ref","defaultValue","onChange","handleSettingsFieldChange","onClick","icons_Settings","icons_Play","icons_Pause","icons_Reset","Component","App","className","clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAIaA,EAAW,WACpB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACjCN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,UAODC,EAAQ,WACnB,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACjCN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,UAMDE,EAAQ,WACnB,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACjCN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,UAODG,EAAO,WAClB,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAA,EAAYC,SAAb,CAAsBC,MAAO,CAAEC,KAAM,UACjCN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,s7ECvChB,IAAMI,EAAeC,IAAOC,IAAVC,KAQZC,EAAaH,IAAOC,IAAVG,IACH,SAAAC,GAAK,MAAyB,UAArBA,EAAMC,WAAwB,QAAU,SACtC,SAAAD,GAAK,MAAyB,UAArBA,EAAMC,WAAwB,MAAQ,UAMjEC,EAAaP,IAAOC,IAAVO,IAEQ,SAAAH,GAAK,MAAyB,UAArBA,EAAMC,WAAyB,MAAQ,UAIlEG,EAAmBT,IAAOC,IAAVS,KAahBC,EAAgBX,IAAOC,IAAVW,KAWbC,EAAiBb,IAAOC,IAAVa,IACF,SAAAT,GAAK,OAAsB,IAAlBA,EAAMU,QAAmB,SAAW,YAIzDC,EAAkBhB,IAAOC,IAAVgB,KAGfC,EAAclB,IAAOC,IAAVkB,IACC,SAAAd,GAAK,OAAsB,IAAlBA,EAAMU,QAAmB,SAAW,YAIzDK,EAAgBpB,IAAOC,IAAToB,IAID,SAAAhB,GAAK,OAAIA,EAAMiB,mBAAqB,UAAY,QAIrD,SAAAjB,GAAK,OAAIA,EAAMiB,mBAAqB,OAAS,OAMrDC,EAAavB,IAAOwB,OAATC,KAWXC,EAAqB1B,IAAO2B,MAATC,KAYnBC,EAAmB7B,IAAO8B,SAAVC,KAOhBC,EAAiBhC,IAAOiC,OAAVC,KA8SLC,cAxSX,SAAAA,EAAY9B,GAAO,IAAA+B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlC,KAcVsC,MAAQ,CACJC,UAAW,EACXC,SAAU,EACVC,SAAU,EACVC,UAAW,EACXC,SAAU,EACVC,SAAU,EACVC,WAAY,QACZC,SAAS,EACTC,SAAU,EACVC,SAAU,EACV/B,oBAAoB,EACpBgC,OAAQ,GACRC,gBAAiB,CACbX,UAAW,EACXC,SAAU,EACVC,SAAU,EACVC,UAAW,EACXC,SAAU,EACVC,SAAU,EACVC,WAAY,QACZC,SAAS,EACTC,SAAU,EACVC,SAAU,EACV/B,oBAAoB,EACpBgC,OAAQ,KAxCGlB,EA+CfoB,mBAAqB,SAACC,EAAEC,EAAEC,GAGtB,IAAIC,EAAgB,GAAJH,EAAS,GAAW,GAAJC,EAAUC,IACxCC,EAEFxB,EAAKyB,MAAQC,YAAY,WAGzB,IAAIC,EAAQC,KAAKC,MAAOL,EAAQ,MAAT,MACnBM,EAAUF,KAAKC,MAAOL,EAAQ,KAAgB,IAC9CO,EAAUP,EAAW,GAoBzB,GAjB6B,UAA1BxB,EAAKO,MAAMO,aAA8C,IAAtBd,EAAKO,MAAMQ,SAC7Cf,EAAKgC,SAAS,CACVxB,UAAWmB,EACXlB,SAAUqB,EACVpB,SAAUqB,IAIW,UAA1B/B,EAAKO,MAAMO,aAA+C,IAAtBd,EAAKO,MAAMQ,SAC9Cf,EAAKgC,SAAS,CACVrB,UAAWgB,EACXf,SAAUkB,EACVjB,SAAUkB,IAKD,IAAbP,EAaA,MAX2B,UAAxBxB,EAAKO,MAAMO,YACdd,EAAKgC,SAAS,CACVd,OAAQ,QACRH,SAAS,IAEc,UAAxBf,EAAKO,MAAMO,YACdd,EAAKgC,SAAS,CACVd,OAAQ,QACRH,SAAS,KAGN,IAETS,GAEC,MA/FQxB,EAkGfiC,iBAAmB,WAef,MAd6B,UAA1BjC,EAAKO,MAAMO,YAAgD,KAAtBd,EAAKO,MAAMW,SAE/ClB,EAAKgC,SAAS,CACVjB,SAAS,EACTL,SAAUV,EAAKO,MAAMG,SAAWV,EAAKO,MAAMS,WAG/CkB,cAAclC,EAAKyB,OACnBzB,EAAKoB,mBAAmBpB,EAAKO,MAAMI,UAAUX,EAAKO,MAAMK,SAASZ,EAAKO,MAAMM,UAC5Eb,EAAKgC,SAAS,CACVlB,WAAa,YAId,GAjHId,EAoHfmC,iBAAmB,WAcf,MAZ6B,UAA1BnC,EAAKO,MAAMO,YAAgD,KAAtBd,EAAKO,MAAMW,SAE/ClB,EAAKgC,SAAS,CACVjB,SAAS,EACTF,SAAUb,EAAKO,MAAMM,SAAWb,EAAKO,MAAMU,WAE/CiB,cAAclC,EAAKyB,OACnBzB,EAAKoB,mBAAmBpB,EAAKO,MAAMC,UAAUR,EAAKO,MAAME,SAAST,EAAKO,MAAMG,UAC5EV,EAAKgC,SAAS,CACVlB,WAAa,YAGd,GAlIId,EAoIfoC,aAAe,SAACf,EAAGC,EAAGC,GAElB,IAAIC,EAAgB,GAAJH,EAAS,GAAW,GAAJC,EAAUC,EAGtCI,EAAQC,KAAKC,MAAOL,EAAQ,MAAT,MACnBM,EAAUF,KAAKC,MAAOL,EAAQ,KAAgB,IAC9CO,EAAUP,EAAW,GAMzB,OAJAG,EAAQA,EAAQ,GAAK,IAAMA,EAAQA,GAIpB,KAHfG,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAGV,KAF/BC,EAAUA,EAAU,GAAK,IAAMA,EAAUA,IA/I9B/B,EAoJfqC,gBAAkB,WACVH,cAAclC,EAAKyB,OACnBzB,EAAKgC,SAAS,CACVxB,UAAWR,EAAKO,MAAMY,gBAAgBX,UACtCC,SAAUT,EAAKO,MAAMY,gBAAgBV,SACrCC,SAAUV,EAAKO,MAAMY,gBAAgBT,SACrCC,UAAWX,EAAKO,MAAMY,gBAAgBR,UACtCC,SAAUZ,EAAKO,MAAMY,gBAAgBP,SACrCC,SAAUb,EAAKO,MAAMY,gBAAgBN,SACrCC,WAAYd,EAAKO,MAAMY,gBAAgBL,WACvCC,QAASf,EAAKO,MAAMY,gBAAgBJ,QACpCC,SAAUhB,EAAKO,MAAMY,gBAAgBH,SACrCC,SAAUjB,EAAKO,MAAMY,gBAAgBF,SACrC/B,mBAAoBc,EAAKO,MAAMY,gBAAgBjC,mBAC/CgC,OAAQlB,EAAKO,MAAMY,gBAAgBD,UAlKhClB,EAsKfsC,oBAAsB,WAGlB,IAA0B,IAAvBtC,EAAKO,MAAMQ,QAEVmB,cAAclC,EAAKyB,OACnBzB,EAAKgC,SAAS,CACVjB,SAAS,SAKZ,IAA2B,IAAvBf,EAAKO,MAAMQ,SAA+C,UAA1Bf,EAAKO,MAAMO,YAAgD,KAAtBd,EAAKO,MAAMW,QAIrFlB,EAAKO,MAAMC,YAAcR,EAAKO,MAAMY,gBAAgBX,WACpDR,EAAKO,MAAME,WAAaT,EAAKO,MAAMY,gBAAgBV,UACnDT,EAAKO,MAAMG,WAAaV,EAAKO,MAAMY,gBAAgBT,SAWlD,KAA0B,IAAvBV,EAAKO,MAAMQ,SAA8C,UAAzBf,EAAKO,MAAMO,YAA+C,KAAtBd,EAAKO,MAAMW,OAQ9E,OAAO,EANXlB,EAAKoB,mBAAmBpB,EAAKO,MAAMI,UAAUX,EAAKO,MAAMK,SAASZ,EAAKO,MAAMM,UACxEb,EAAKgC,SAAS,CACXlB,WAAa,QAAQC,SAAS,SAVtCf,EAAKoB,mBAAmBpB,EAAKO,MAAMC,UAAUR,EAAKO,MAAME,SAAST,EAAKO,MAAMG,UACxEV,EAAKgC,SAAS,CACVlB,WAAa,QAAQC,SAAS,KA/L/Bf,EAoNfuC,qBAAuB,WACnBL,cAAclC,EAAKyB,OACnBzB,EAAKgC,SAAS,CACV9C,oBAAoB,KAvNbc,EA2NfwC,2BAA6B,WACzBxC,EAAKgC,SAAS,CACV9C,oBAAoB,KA7Nbc,EAiOXyC,yBAA2B,SAACC,GAC5B1C,EAAKgC,SAAS,CAEVb,gBAAgB,CACZX,UAAWmC,SAAS3C,EAAK4C,eAAeC,QAAQxF,OAChDoD,SAAUkC,SAAS3C,EAAK8C,cAAcD,QAAQxF,OAC9CqD,SAAUiC,SAAS3C,EAAK+C,cAAcF,QAAQxF,OAC9CsD,UAAWgC,SAAS3C,EAAKgD,eAAeH,QAAQxF,OAChDuD,SAAU+B,SAAS3C,EAAKiD,cAAcJ,QAAQxF,OAC9CwD,SAAU8B,SAAS3C,EAAKkD,cAAcL,QAAQxF,OAC9CyD,WAAY,QACZC,SAAS,EACTC,SAAU2B,SAAS3C,EAAKmD,cAAcN,QAAQxF,OAC9C4D,SAAU0B,SAAS3C,EAAKoD,cAAcP,QAAQxF,OAC9C6B,oBAAoB,EACpBgC,OAAQ,IAEZhC,oBAAoB,KA/O5Bc,EAAK4C,eAAiBS,IAAMC,YAC5BtD,EAAK8C,cAAgBO,IAAMC,YAC3BtD,EAAK+C,cAAgBM,IAAMC,YAC3BtD,EAAKmD,cAAgBE,IAAMC,YAE3BtD,EAAKgD,eAAiBK,IAAMC,YAC5BtD,EAAKiD,cAAgBI,IAAMC,YAC3BtD,EAAKkD,cAAgBG,IAAMC,YAC3BtD,EAAKoD,cAAgBC,IAAMC,YAXZtD,wEA6Pf,OAEIhD,EAAAC,EAAAC,cAACS,EAAD,KACIX,EAAAC,EAAAC,cAAC8B,EAAD,CAAgBE,mBAAoBiB,KAAKI,MAAMrB,oBAEnDlC,EAAAC,EAAAC,cAACuC,EAAD,KACIzC,EAAAC,EAAAC,cAAC0C,EAAD,4BACA5C,EAAAC,EAAAC,cAACoC,EAAD,CAAqBiE,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,IAAKvD,KAAKyC,eAAgBe,aAAcxD,KAAKI,MAAMY,gBAAgBX,UAAWoD,SAAUzD,KAAK0D,4BAFrJ,IAGI7G,EAAAC,EAAAC,cAACoC,EAAD,CAAqBiE,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,IAAKvD,KAAK2C,cAAea,aAAcxD,KAAKI,MAAMY,gBAAgBV,WAH1H,IAIIzD,EAAAC,EAAAC,cAACoC,EAAD,CAAqBiE,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,IAAKvD,KAAK4C,cAAeY,aAAcxD,KAAKI,MAAMY,gBAAgBT,WAJ1H,IAIsI1D,EAAAC,EAAAC,cAAA,WAJtI,WAKIF,EAAAC,EAAAC,cAACoC,EAAD,CAAqBiE,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,IAAKvD,KAAKgD,cAAeQ,aAAcxD,KAAKI,MAAMY,gBAAgBH,WAL1H,OAOAhE,EAAAC,EAAAC,cAACuC,EAAD,KACIzC,EAAAC,EAAAC,cAAC0C,EAAD,4BACA5C,EAAAC,EAAAC,cAACoC,EAAD,CAAqBiE,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,IAAKvD,KAAK6C,eAAgBW,aAAcxD,KAAKI,MAAMY,gBAAgBR,YAF3H,IAGI3D,EAAAC,EAAAC,cAACoC,EAAD,CAAqBiE,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,IAAKvD,KAAK8C,cAAeU,aAAcxD,KAAKI,MAAMY,gBAAgBP,WAH1H,IAII5D,EAAAC,EAAAC,cAACoC,EAAD,CAAqBiE,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,IAAKvD,KAAK+C,cAAeS,aAAcxD,KAAKI,MAAMY,gBAAgBN,WAJ1H,IAIsI7D,EAAAC,EAAAC,cAAA,WAJtI,WAKIF,EAAAC,EAAAC,cAACoC,EAAD,CAAqBiE,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,IAAKvD,KAAKiD,cAAeO,aAAcxD,KAAKI,MAAMY,gBAAgBF,WAL1H,OAQIjE,EAAAC,EAAAC,cAACiC,EAAD,CAAa2E,QAAS3D,KAAKsC,0BAA3B,QACAzF,EAAAC,EAAAC,cAACiC,EAAD,CAAa2E,QAAS3D,KAAKqC,4BAA3B,WAEAxF,EAAAC,EAAAC,cAACa,EAAD,CAAY+F,QAAS3D,KAAK8B,iBAAkB/D,WAAYiC,KAAKI,MAAMW,QAC/DlE,EAAAC,EAAAC,cAACqB,EAAD,KACK4B,KAAKiC,aAAajC,KAAKI,MAAMC,UAAUL,KAAKI,MAAME,SAASN,KAAKI,MAAMG,YAG/E1D,EAAAC,EAAAC,cAACmB,EAAD,KACIrB,EAAAC,EAAAC,cAACuB,EAAD,CAAgBE,QAASwB,KAAKI,MAAMQ,QAAS+C,QAAS3D,KAAKoC,sBAAsBvF,EAAAC,EAAAC,cAAC6G,EAAD,OACjF/G,EAAAC,EAAAC,cAAC0B,EAAD,CAAiBkF,QAAS3D,KAAKmC,sBAA6C,IAAvBnC,KAAKI,MAAMQ,QAAoB/D,EAAAC,EAAAC,cAAC8G,EAAD,MAAUhH,EAAAC,EAAAC,cAAC+G,EAAD,OAC9FjH,EAAAC,EAAAC,cAAC4B,EAAD,CAAaH,QAASwB,KAAKI,MAAMQ,QAAS+C,QAAS3D,KAAKkC,iBAAiBrF,EAAAC,EAAAC,cAACgH,EAAD,QAE7ElH,EAAAC,EAAAC,cAACiB,EAAD,CAAY2F,QAAS3D,KAAKgC,iBAAkBjE,WAAYiC,KAAKI,MAAMW,QAC/DlE,EAAAC,EAAAC,cAACqB,EAAD,KACC4B,KAAKiC,aAAajC,KAAKI,MAAMI,UAAUR,KAAKI,MAAMK,SAAST,KAAKI,MAAMM,oBAlSvEsD,aCnGLC,mLARX,OACEpH,EAAAC,EAAAC,cAAA,OAAKmH,UAAU,OACbrH,EAAAC,EAAAC,cAACoH,EAAD,cAJUH,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7H,EAAAC,EAAAC,cAAC4H,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bfeed73d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FiSettings, FiPause, FiRefreshCcw, FiPlay } from \"react-icons/fi\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            <IconContext.Provider value={{ size: \"1.5em\"}}>\r\n                <div>\r\n                <FiSettings/>\r\n                </div>\r\n            </IconContext.Provider>\r\n        </div>\r\n    );\r\n  };\r\n\r\n  export const Pause = () => {\r\n    return (\r\n        <div>\r\n            <IconContext.Provider value={{ size: \"1.5em\"}}>\r\n                <div>\r\n                <FiPause/>\r\n                </div>\r\n            </IconContext.Provider>\r\n        </div>\r\n    );\r\n  };\r\n  export const Reset = () => {\r\n    return (\r\n        <div>\r\n            <IconContext.Provider value={{ size: \"1.5em\"}}>\r\n                <div>\r\n                <FiRefreshCcw/>\r\n                </div>\r\n            </IconContext.Provider>\r\n        </div>\r\n    );\r\n  };\r\n\r\n  export const Play = () => {\r\n    return (\r\n        <div>\r\n            <IconContext.Provider value={{ size: \"1.5em\"}}>\r\n                <div>\r\n                <FiPlay/>\r\n                </div>\r\n            </IconContext.Provider>\r\n        </div>\r\n    );\r\n  };","import React, { Component } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { Settings, Pause, Reset, Play } from \"./icons.js\";\r\n\r\n\r\nconst ClockWrapper = styled.div`\r\n    display: grid;\r\n    height: 100%;\r\n    align-content: start;\r\n    grid-template-columns: 1;\r\n    grid-template-rows: 2;\r\n`;\r\n\r\nconst WhiteField = styled.div`\r\n    color: ${props => props.fieldColor === 'black'? 'white' : 'black'}; \r\n    background-color: ${props => props.fieldColor === 'black'? 'red' : 'white'};\r\n    height: 44vh;\r\n    & > div {\r\n        transform: rotate(180deg);\r\n    }\r\n`;\r\nconst BlackField = styled.div`\r\n    color: white;\r\n    background-color: ${props => props.fieldColor === 'white' ? 'red' : 'black'};\r\n    height: 44vh;\r\n`;\r\n\r\nconst ControlContainer = styled.div`\r\n    display:flex;\r\n    color: white;\r\n    background-color: #2196f3;\r\n    height: 12vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    font-size: 5vh;\r\n    justify-content:space-around;\r\n`;\r\n\r\nconst TimeContainer = styled.div`\r\n    \r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    text-align: center;\r\n    height:100%;\r\n    width:100%;\r\n    user-select: none;\r\n    font-size:10vh;\r\n`\r\nconst SettingsButton = styled.div`\r\n    visibility: ${props => props.visible === true ? 'hidden' : 'visible'}; \r\n    color: white;\r\n    \r\n`\r\nconst StartStopButton = styled.div`\r\n    color: white;\r\n`\r\nconst ResetButton = styled.div`\r\n    visibility: ${props => props.visible === true ? 'hidden' : 'visible'}; \r\n    color: white;\r\n`\r\n\r\nconst SettingsWindow= styled.div`\r\n\r\n    color: white;\r\n    position: fixed;\r\n    background:  ${props => props.settingsVisibility ? '#2196f3' : 'none'}; \r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: ${props => props.settingsVisibility ? '100%' : '0%'}; \r\n    transition: height .65s;\r\n    overflow: hidden;\r\n    z-index: 1000;\r\n`\r\n\r\nconst SettingsBtn= styled.button`\r\n\r\n    color: white;\r\n    font-size: 5vh;\r\n    margin: 5%;\r\n    background-color:transparent;\r\n    height: 10vh;\r\n    width: 35vw;\r\n    border: 1px solid white;\r\n    border-radius: 30%;\r\n`\r\nconst SettingsNumberInput= styled.input`\r\n\r\n    height: 8vh;\r\n    width: 11vw;\r\n    font-size: 5vh;\r\n    text-align: center;\r\n    color: white;\r\n    background-color: transparent;\r\n    border: 1px solid white;\r\n    border-radius: 30%;\r\n`\r\n\r\nconst SettingsFieldSet = styled.fieldset`\r\nfont-size: 5vh;\r\ncolor: white;\r\nborder: 2px solid white;\r\nmargin: 3%;\r\ntext-align: center;\r\n`\r\nconst SettingsLegend = styled.legend`\r\ntext-align: center;\r\n`\r\n\r\nclass Clock extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.whiteHourInput = React.createRef();\r\n        this.whiteMinInput = React.createRef();\r\n        this.whiteSecInput = React.createRef();\r\n        this.addWhiteInput = React.createRef();\r\n\r\n        this.blackHourInput = React.createRef();\r\n        this.blackMinInput = React.createRef();\r\n        this.blackSecInput = React.createRef();\r\n        this.addBlackInput = React.createRef();\r\n      }\r\n    \r\n  \r\n    state = {\r\n        whiteHour: 0,\r\n        whiteMin: 5,\r\n        whiteSec: 0,\r\n        blackHour: 0,\r\n        blackMin: 5,\r\n        blackSec: 0,\r\n        nextPlayer: \"white\",\r\n        playing: false,\r\n        addWhite: 5,\r\n        addBlack: 5,\r\n        settingsVisibility: false,\r\n        winner: '',\r\n        defaultSettings: {\r\n            whiteHour: 0,\r\n            whiteMin: 5,\r\n            whiteSec: 0,\r\n            blackHour: 0,\r\n            blackMin: 5,\r\n            blackSec: 0,\r\n            nextPlayer: \"white\",\r\n            playing: false,\r\n            addWhite: 5,\r\n            addBlack: 5,\r\n            settingsVisibility: false,\r\n            winner: '',\r\n        }\r\n    };\r\n\r\n\r\n\r\n        \r\n        countdownTimeStart = (h,m,s) => {\r\n            \r\n            // Calculating distance from input parameters\r\n            let distance = (h * 60 * 60) + (m * 60) + s;\r\n            --distance;\r\n            //Setting interval \r\n            this.timer = setInterval(() => {\r\n        \r\n            // Time calculations for hours, minutes and seconds from distance\r\n            let hours = Math.floor((distance % (60 * 60 * 24)) / (60 * 60));\r\n            let minutes = Math.floor((distance % (60 * 60)) / 60);\r\n            let seconds = distance % 60;\r\n    \r\n            //set state white remaining time\r\n            if(this.state.nextPlayer === \"white\"&&this.state.playing ===true) {\r\n                this.setState({\r\n                    whiteHour: hours,\r\n                    whiteMin: minutes,\r\n                    whiteSec: seconds\r\n                });\r\n            }\r\n            //set state black remaining time\r\n            if(this.state.nextPlayer === \"black\" &&this.state.playing ===true) {\r\n                this.setState({\r\n                    blackHour: hours,\r\n                    blackMin: minutes,\r\n                    blackSec: seconds\r\n                });\r\n            }\r\n    \r\n            //Update the distance down every 1 second\r\n            if (distance === 0)\r\n            {\r\n                if(this.state.nextPlayer===\"black\")\r\n                this.setState({\r\n                    winner: \"white\",\r\n                    playing: false\r\n                });\r\n                if(this.state.nextPlayer===\"white\")\r\n                this.setState({\r\n                    winner: \"black\",\r\n                    playing: false\r\n                });\r\n\r\n                return false;\r\n            }\r\n            --distance;      \r\n            \r\n            }, 1000);\r\n        }\r\n    \r\n        handleWhiteClick = () =>{\r\n            if(this.state.nextPlayer === \"white\" && this.state.winner === \"\")\r\n            {\r\n                this.setState({\r\n                    playing: true,\r\n                    whiteSec: this.state.whiteSec + this.state.addWhite\r\n\r\n                });\r\n                clearInterval(this.timer);\r\n                this.countdownTimeStart(this.state.blackHour,this.state.blackMin,this.state.blackSec);\r\n                this.setState({\r\n                    nextPlayer : \"black\",\r\n                    \r\n                });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        handleBlackClick = () =>{\r\n\r\n            if(this.state.nextPlayer === \"black\" && this.state.winner === \"\")\r\n            {\r\n                this.setState({\r\n                    playing: true,\r\n                    blackSec: this.state.blackSec + this.state.addBlack\r\n                });\r\n                clearInterval(this.timer);\r\n                this.countdownTimeStart(this.state.whiteHour,this.state.whiteMin,this.state.whiteSec);\r\n                this.setState({\r\n                    nextPlayer : \"white\"\r\n                });\r\n            }\r\n            return false;\r\n        }\r\n        formatOutput = (h, m, s) => {\r\n\r\n            let distance = (h * 60 * 60) + (m * 60) + s;\r\n\r\n            // Time calculations for hours, minutes and seconds from distance\r\n            let hours = Math.floor((distance % (60 * 60 * 24)) / (60 * 60));\r\n            let minutes = Math.floor((distance % (60 * 60)) / 60);\r\n            let seconds = distance % 60;\r\n\r\n            hours = hours < 10 ? \"0\" + hours : hours;\r\n            minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n            seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n            return hours + \":\" + minutes + \":\" + seconds;\r\n        }\r\n\r\n        handleResetGame = () =>{\r\n                clearInterval(this.timer);\r\n                this.setState({\r\n                    whiteHour: this.state.defaultSettings.whiteHour,\r\n                    whiteMin: this.state.defaultSettings.whiteMin,\r\n                    whiteSec: this.state.defaultSettings.whiteSec,\r\n                    blackHour: this.state.defaultSettings.blackHour,\r\n                    blackMin: this.state.defaultSettings.blackMin,\r\n                    blackSec: this.state.defaultSettings.blackSec,\r\n                    nextPlayer: this.state.defaultSettings.nextPlayer,\r\n                    playing: this.state.defaultSettings.playing,\r\n                    addWhite: this.state.defaultSettings.addWhite,\r\n                    addBlack: this.state.defaultSettings.addBlack,\r\n                    settingsVisibility: this.state.defaultSettings.settingsVisibility,\r\n                    winner: this.state.defaultSettings.winner\r\n                });\r\n        }\r\n\r\n        handlePlayPauseGame = () => {\r\n\r\n            //pause the game if it is playing\r\n            if(this.state.playing === true){\r\n\r\n                clearInterval(this.timer);\r\n                this.setState({\r\n                    playing: false\r\n                });\r\n            }\r\n\r\n            // continue the game if next player is white\r\n            else if (this.state.playing === false && this.state.nextPlayer === \"white\" && this.state.winner === \"\" &&\r\n            \r\n            //check if this is not the first move in the game\r\n            (\r\n                this.state.whiteHour !== this.state.defaultSettings.whiteHour ||\r\n                this.state.whiteMin !== this.state.defaultSettings.whiteMin ||\r\n                this.state.whiteSec !== this.state.defaultSettings.whiteSec \r\n                \r\n            )\r\n            ) {\r\n\r\n                this.countdownTimeStart(this.state.whiteHour,this.state.whiteMin,this.state.whiteSec);\r\n                    this.setState({\r\n                        nextPlayer : \"white\",playing: true\r\n                    });\r\n            }\r\n            // continue the game if next player is black\r\n            else if(this.state.playing === false && this.state.nextPlayer ===\"black\" && this.state.winner === \"\" ){\r\n\r\n                 this.countdownTimeStart(this.state.blackHour,this.state.blackMin,this.state.blackSec);\r\n                     this.setState({\r\n                        nextPlayer : \"black\",playing: true\r\n                    });\r\n            }\r\n            \r\n               else {return false;}\r\n                \r\n            \r\n        }   \r\n    \r\n\r\n\r\n    \r\n\r\n        handleSettingsButton = () =>{\r\n            clearInterval(this.timer);\r\n            this.setState({\r\n                settingsVisibility: true\r\n            });\r\n    }\r\n\r\n        handleSettingsCancelButton = () =>{\r\n            this.setState({\r\n                settingsVisibility: false\r\n            });\r\n    }\r\n    \r\n            handleSettingsSaveButton = (e) =>{\r\n            this.setState({\r\n\r\n                defaultSettings:{\r\n                    whiteHour: parseInt(this.whiteHourInput.current.value),\r\n                    whiteMin: parseInt(this.whiteMinInput.current.value),\r\n                    whiteSec: parseInt(this.whiteSecInput.current.value),\r\n                    blackHour: parseInt(this.blackHourInput.current.value),\r\n                    blackMin: parseInt(this.blackMinInput.current.value),\r\n                    blackSec: parseInt(this.blackSecInput.current.value),\r\n                    nextPlayer: \"white\",\r\n                    playing: false,\r\n                    addWhite: parseInt(this.addWhiteInput.current.value),\r\n                    addBlack: parseInt(this.addBlackInput.current.value),\r\n                    settingsVisibility: false,\r\n                    winner: ''\r\n                },\r\n                settingsVisibility: false\r\n            });\r\n    }\r\n\r\n    // handleSettingsFieldChange = (e) =>{\r\n\r\n    //     throw new console.error('not implemented');\r\n        \r\n    // }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <ClockWrapper>\r\n                <SettingsWindow settingsVisibility={this.state.settingsVisibility}>\r\n\r\n            <SettingsFieldSet>\r\n                <SettingsLegend>White time settings</SettingsLegend>\r\n                <SettingsNumberInput type=\"number\" min=\"0\" max=\"23\" ref={this.whiteHourInput} defaultValue={this.state.defaultSettings.whiteHour} onChange={this.handleSettingsFieldChange}/>:\r\n                <SettingsNumberInput type=\"number\" min=\"0\" max=\"59\" ref={this.whiteMinInput} defaultValue={this.state.defaultSettings.whiteMin}/>:\r\n                <SettingsNumberInput type=\"number\" min=\"0\" max=\"59\" ref={this.whiteSecInput} defaultValue={this.state.defaultSettings.whiteSec}/> <br/>add time\r\n                <SettingsNumberInput type=\"number\" min=\"0\" max=\"59\" ref={this.addWhiteInput} defaultValue={this.state.defaultSettings.addWhite}/>sec \r\n            </SettingsFieldSet>\r\n            <SettingsFieldSet>\r\n                <SettingsLegend>Black time settings</SettingsLegend>\r\n                <SettingsNumberInput type=\"number\" min=\"0\" max=\"23\" ref={this.blackHourInput} defaultValue={this.state.defaultSettings.blackHour}/>:\r\n                <SettingsNumberInput type=\"number\" min=\"0\" max=\"59\" ref={this.blackMinInput} defaultValue={this.state.defaultSettings.blackMin}/>:\r\n                <SettingsNumberInput type=\"number\" min=\"0\" max=\"59\" ref={this.blackSecInput} defaultValue={this.state.defaultSettings.blackSec}/> <br/>add time\r\n                <SettingsNumberInput type=\"number\" min=\"0\" max=\"59\" ref={this.addBlackInput} defaultValue={this.state.defaultSettings.addBlack}/>sec\r\n            </SettingsFieldSet>\r\n\r\n                <SettingsBtn onClick={this.handleSettingsSaveButton}>Save</SettingsBtn>\r\n                <SettingsBtn onClick={this.handleSettingsCancelButton}>Cancel</SettingsBtn>\r\n                </SettingsWindow>\r\n                <WhiteField onClick={this.handleWhiteClick} fieldColor={this.state.winner}>\r\n                    <TimeContainer>\r\n                        {this.formatOutput(this.state.whiteHour,this.state.whiteMin,this.state.whiteSec)}\r\n                    </TimeContainer>\r\n                </WhiteField>\r\n                <ControlContainer>\r\n                    <SettingsButton visible={this.state.playing} onClick={this.handleSettingsButton}><Settings/></SettingsButton>\r\n                    <StartStopButton onClick={this.handlePlayPauseGame}>{this.state.playing === false ? <Play/> : <Pause/>}</StartStopButton>\r\n                    <ResetButton visible={this.state.playing} onClick={this.handleResetGame}><Reset/></ResetButton>\r\n                </ControlContainer>\r\n                <BlackField onClick={this.handleBlackClick} fieldColor={this.state.winner}>\r\n                    <TimeContainer>\r\n                    {this.formatOutput(this.state.blackHour,this.state.blackMin,this.state.blackSec)}\r\n                    </TimeContainer>\r\n                </BlackField>\r\n            </ClockWrapper>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clock;\r\n  ","import React, { Component } from 'react';\nimport Clock from './clock.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Clock/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}